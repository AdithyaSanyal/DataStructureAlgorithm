#include<stdio.h> 

  

int min(int a,int b){ 

if(a>b){ 

    return b; 

} 

else{ 

    return a; 

} 

} 

  

void allPairShortestPath(int p[10][10],int n){ 

for(int i=1;i<=n;i++){ 

    for(int j=1;j<=n;j++){ 

        for(int k=1;k<=n;k++){ 

            if(j==k){ 

                p[j][k]=0; 

            } 

            else{ 

                p[j][k]=min(p[j][k],p[j][i]+p[i][k]); 

            } 

        } 

    } 

} 

} 

  

void main(){ 

int p[10][10],vertices,edges; 

int u,v,w; 

  

printf("\n Enter the number of vertices:"); 

scanf("%d",&vertices); 

printf("\n Enter the number of edges:\n"); 

scanf("%d",&edges); 

  

for(int i=1;i<=vertices;i++){ 

    for(int j=1;j<=vertices;j++){ 

        if(i==j){ 

            p[i][j]=0; 

        } 

        else{ 

            p[i][j]=9999; 

        } 

    } 

} 

  

for(int i=1;i<=edges;i++){ 

    printf("\n Enter the start and end vertex of edge%d with its weight \n",i); 

    scanf("%d %d %d",&u,&v,&w); 

    p[u][v]=w; 

} 

  

printf("\n Input Matrix:\n"); 

for(int i=1;i<=vertices;i++){ 

    for(int j=1;j<=vertices;j++){ 

        printf("%d\t",p[i][j]); 

    } 

    printf("\n"); 

} 

  

allPairShortestPath(p,vertices); 

  

printf("\n Transitive closure:\n"); 

for(int i=1;i<=vertices;i++){ 

    for(int j=1;j<=vertices;j++){ 

        printf("%d\t",p[i][j]); 

    } 

    printf("\n"); 

} 

  

printf("\n The shortest paths are:\n"); 

for(int i=1;i<=vertices;i++){ 

    for(int j=1;j<=vertices;j++){ 

        if(i!=j){ 

            printf("\n ( %d,%d ) = %d",i,j,p[i][j]); 

        } 

    } 

} 

  

} 