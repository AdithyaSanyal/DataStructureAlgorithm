#include<stdio.h>
#include<malloc.h>

struct node{
int data;
struct node *prev;
struct node *next;
};
struct node *head=NULL,*tail;

void print(struct node *n){
while(n!=0){
    printf(" %d ",n->data);
    n=n->next;
}
}

int count(struct node *n){
int count=0;
while(n!=0){
    n=n->next;
    count++;
}
return count;
}

void create(){
struct node *temp,*newnode;
int n;
printf("Enter the number of entries: ");
scanf("%d",&n);
for(int i=0;i<n;i++){
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter data: ");
scanf("%d",&newnode->data);
newnode->next=0;
newnode->prev=0;
if(head==0){
    head=tail=temp=newnode;
}
else{
    temp->next=newnode;
    newnode->prev=temp;
    temp=newnode;
    tail->next=newnode;
    newnode->prev=tail;
    tail=newnode;
}
}
print(head);
}

void insertAtBeg(){
struct node *newnode;

create();
newnode=(struct node *)malloc(sizeof(struct node));
printf("\nEnter data to be inserted at start: ");
scanf("%d",&newnode->data);

if(head==NULL){
    newnode->next=NULL;
    newnode->prev=NULL;
    head=newnode;
}
else{
    head->prev=newnode;
    newnode->next=head;
    head=newnode;
}
print(head);
}

void insertAtEnd(){
struct node *newnode,*temp;

create();
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter data to be inserted at the end: ");
scanf("%d",&newnode->data);
newnode->prev=0;
newnode->next=0;

tail->next=newnode;
newnode->prev=tail;
tail=newnode;
print(head);
}

void insertAtPosition(){
struct node *newnode,*temp;
int i,pos;
create();
printf("Enter the position where we want to insert the node: ");
scanf("%d",&pos);
if(pos>count(head)){
    printf("The entered position is invalid");
}
else if(pos==1){
    insertAtBeg();
}
else if(pos==count(head)){
    insertAtEnd();
}
else{
    newnode=(struct node *)malloc(sizeof(struct node));
    printf("\nEnter the data to be inserted in the node: ");
    scanf("%d",&newnode->data);
    int i=1;
    temp=head;
    while(pos>i){//to insert after a particular position replace pos-1 with pos
        temp=temp->next;
        i++;
    }
    newnode->prev=temp;
    newnode->next=temp->next;
    temp->next=newnode;
    temp->next->prev=newnode;
    print(head);
}
}

void deletebeg(){
struct node *temp;
create();
temp=(struct node *)malloc(sizeof(struct node));
if(head==0){
    printf("\nThe linked list is empty");
}
else{
    temp=head;
    head=head->next;
    head->prev=0;
    free(temp);
    printf("\nAfter deleting:");
    print(head);
}
}

void deleteEnd(){
struct node *temp;
create();
temp=(struct node *)malloc(sizeof(struct node));
if(tail==0){
    printf("The list is empty");
}
else{
    temp=tail;
    tail->prev->next=0;
    tail=tail->prev;
    free(temp);
    printf("\nAfter deletion from the end:\n");
    print(head);
}
}

void deletePos(){
struct node *temp;
int pos,i=1;
create();
printf("Enter the position: ");
scanf("%d",&pos);
temp=head;
while(i<pos){
    temp=temp->next;
    i++;
}
temp->prev->next=temp->next;
temp->next->prev=temp->prev;
printf("\nAfter deletion: \n");
print(head);
}

void main(){
    int option;
    printf("1.Create a Doubly Linked List\n 2.Insert a node at the start\n 3.Insert a node at the end\n 4.Insert a node at a given position\n ");
    printf("5.Delete a node at the start\n 6.Delete a node at the end\n 7.Delete a node from a position \n");
    printf("\nEnter choice: ");
    scanf("%d",&option);
    switch(option){
case 1:
    create();
    break;
case 2:
    insertAtBeg();
    break;
case 3:
    insertAtEnd();
    break;
case 4:
    insertAtPosition();
    break;
case 5:
    deletebeg();
    break;
case 6:
    deleteEnd();
    break;
case 7:
    deletePos();
    break;
}
}
