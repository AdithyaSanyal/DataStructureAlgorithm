#include<stdio.h>
#include<stdlib.h>

int g[10][10],visited[10],n;
typedef struct q{
int r,f;
int data[10];
}q;

int empty(q *p){
if(p->r==-1){
    return 1;
}
return 0;
}

int full(q *p){
if(p->r==9){
    return 1;
}
return 0;
}

void enqueue(q *p,int x){
if(p->r==-1){
    p->r=p->f=0;
    p->data[p->r]=x;
}
else{
    p->r=p->r+1;
    p->data[p->r]=x;
}
}

int dequeue(q *p){
int x;
x=p->data[p->f];
if(p->r==p->f){
    p->r=-1;
    p->f=-1;
}
else{
    p->f=p->f+1;
}
return x;
}


void DFS(int i){
int j;
printf("\n%d",i);
visited[i]=1;
for(j=0;j<=n;j++){
    if(!visited[j] && g[i][j]==1){
        DFS(j);
    }
}
}

void BFS(int v){
int visit[10],i;
q Q;
Q.r=Q.f=-1;
for(i=0;i<n;i++){
    visit[i]=0;
}
enqueue(&Q,v);
printf("\n visit\t%d",v);
visit[v]=1;
while(!empty(&Q)){
    v=dequeue(&Q);
    for(i=0;i<n;i++){
        if(visit[i]==0 && g[v][i]!=0){
            enqueue(&Q,i);
            visit[i]=1;
            printf("\n visit\t%d",i);
        }
    }
}
}

void main(){
int i,j,choice=0,v;
while(choice!=3){
printf(" \n 1. DFS \n 2. BFS \n 3.Exit \n");
printf("\nEnter choice: ");
scanf("%d",&choice);
switch(choice){
case 1:
    printf("\nEnter number of vertices: ");
    scanf("%d",&n);
    printf("\nEnter adjacency matrix of graph: ");
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            scanf("%d",&g[i][j]);
        }
    }
    for(i=0;i<n;i++){
        visited[i]=0;
    }
    DFS(0);
    break;


case 2:
    printf("\nEnter number of vertices: ");
    scanf("%d",&n);
    printf("\nEnter adjacency matrix of graph: ");
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            scanf("%d",&g[i][j]);
        }
    }
    printf("\nEnter starting vertex: ");
    scanf("%d",&v);
    BFS(v);
    break;

}
}
}
